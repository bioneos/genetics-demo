'use strict';

// Keep track of the current alert
let currentAlertType = '';
let currentAlertTimeout = null;

// Hide the current alert
const hideAlert = (condition = () => true) => {
  if (condition())
  {
    $('#dna-translation-alert').addClass('d-none');
    $('#sequence-alignment-alert').addClass('d-none');
  }
};

// A functional expression that returns true when the current alert is an error alert
// This is meant to be passed as a condition to the hideAlert function
const errorsOnly = () => currentAlertType === 'danger' || currentAlertType === 'error';

// Show an alert with the specified information
const showAlert = (type, time, message) => {
  currentAlertType = type;

  $('#dna-translation-alert').html(message);
  $('#sequence-alignment-alert').html(message);
  if (type === 'danger' || type === 'error')
  {
    $('#dna-translation-alert').removeClass('alert-info');
    $('#sequence-alignment-alert').removeClass('alert-info');
    $('#dna-translation-alert').addClass('alert-danger');
    $('#sequence-alignment-alert').addClass('alert-danger');
  }
  else
  {
    $('#dna-translation-alert').addClass('alert-info');
    $('#sequence-alignment-alert').addClass('alert-info');
    $('#dna-translation-alert').removeClass('alert-danger');
    $('#sequence-alignment-alert').removeClass('alert-danger');
  }
  $('#dna-translation-alert').removeClass('d-none');
  $('#sequence-alignment-alert').removeClass('d-none');
  if (time > 0)
  {
    currentAlertTimeout = setTimeout(hideAlert, time);
  }
  else
  {
    if (currentAlertTimeout)
    {
      clearTimeout(currentAlertTimeout);
    }
    currentAlertTimeout = null;
  }
};

// Gets rid of comments in FASTA file strings for processing
const removeFastaComments = fastaString => {
  const lines = fastaString.split('\n');
  let parsedString = '';
  for (const line of lines)
  {
    if (line.charAt(0) !== '>' && line.charAt(0) !== ';')
    {
      parsedString += line + '\n';
    }
  }
  return parsedString;
};

// Converts a string of DNA to a FASTA string
// Can also convert an RNA string
const convertToFastaString = dnaString => {
  dnaString = dnaString.replace(/\s+/g, '');
  let resultStr = '>FASTA file generated by Javascript Genetics Demo from Bio::Neos\n';
  for (let i = 0; i < dnaString.length; i++)
  {
    resultStr += dnaString.charAt(i).toUpperCase();
    if ((i + 1) % 80 === 0)
    {
      resultStr += '\n';
    }
  }
  return resultStr;
};

// Gets the file extension of a file name
const getFileExtension = fileName => {
  const extensionIndex = fileName.indexOf('.') + 1;
  return fileName.substring(extensionIndex);
};

// Initializes the file input handlers for uploading fasta and txt files
const fileInputHandler = (fileInput, output) => {
  $(fileInput).change(event => {
    if (event.target.files.length !== 1)
    {
      showAlert('error', 0, `You selected ${event.target.files.length} files. You must select exactly one FASTA or plain text file.`);
      return;
    }

    const file = event.target.files[0];
    const fileExtension = getFileExtension(file.name);
    if (!['txt', 'fasta', 'fas', 'fa'].includes(fileExtension))
    {
      showAlert('error', 0, `You selected a <span class="monospaced">.${fileExtension}</span> file. You must select a FASTA or plain text file.`);
      return;
    }

    const fileReader = new FileReader();
    fileReader.onload = () => {
      $(output).val(removeFastaComments(fileReader.result));
    };
    fileReader.readAsText(event.target.files[0]);
  });
};

// Requires all text fields to have a value
// Returns false if one or more is missing a value
const requireInput = (...textFields) => {
  let numEmptyFields = 0;
  for (const textField of textFields)
  {
    if (!$(textField).val())
    {
      numEmptyFields++;
    }
  }
  switch (numEmptyFields)
  {
    case 0:
      return true;
    case 1:
      showAlert('error', 0, 'You must input a value to do that.');
      return false;
    default:
      showAlert('error', 0, 'You must input values to do that.');
      return false;
  }
};

// Alerts the user when an AJAX call fails
const ajaxError = (xhr, statusText, errorString) => {
  let errorMessage = '';
  if (xhr.responseJSON && xhr.responseJSON.error)
  {
    errorMessage = xhr.responseJSON.error;
  }
  else if (statusText === 'timeout')
  {
    errorMessage = 'The server timed out.';
  }
  else
  {
    errorMessage = 'An internal server error has occurred.';
  }
  showAlert('error', 0, errorMessage);
};

// Initializes the handlers for copying the text from a text field
const copyTextHandler = (copyButton, textArea) => {
  $(copyButton).click(event => {
    $(textArea).select();
    document.execCommand('copy');
    showAlert('info', 3000, $(textArea).val() ? 'Text copied successfully!' : 'There is no text to copy.');
  });
};

// Beings to download a file for the user with the indicated name, type, and data (string)
// https://stackoverflow.com/a/18197341/7300063
const download = (fileName, mimeType, data) => {
  const element = document.createElement('a');
  element.setAttribute('href', `data:${mimeType};charset=utf-8,` + encodeURIComponent(data));
  element.setAttribute('download', fileName);
  element.style.display = 'none';

  document.body.appendChild(element);
  element.click();
  document.body.removeChild(element);
};

// Initializes the handlers for downloading the contents of text fields
const downloadHandler = (downloadButton, textArea, fileName, mimeType) => {
  $(downloadButton).click(event => {
    if (mimeType === 'application/fasta')
    {
      download(fileName, mimeType, convertToFastaString($(textArea).val()));
    }
    else
    {
      download(fileName, mimeType, $(textArea).val());
    }
  });
};

// Initializes the handlers for clearing the contents of text fields
const clearTextHandler = (clearButton, textArea) => {
  $(clearButton).click(event => {
    $(textArea).val('');
  });
};

// Initializes the handlers for opening the contents of text fields in the other tab
const openHandler = (openButton, textArea, url) => {
  $(openButton).click(event => {
    if ($(textArea).val())
    {
      window.location.href = `${url}?dna=${$(textArea).val()}`;
    }
    else
    {
      window.location.href = url;
    }
  });
};

// Executes when the DOM is ready
$(() => {
  // Check if a DNA string is encoded in the url params and fill the appropriate text field if so
  const urlSearchParams = new URLSearchParams(window.location.search);
  if (urlSearchParams.has('dna'))
  {
    $('#dna-input').val(urlSearchParams.get('dna'));
    $('#dna-input-1').val(urlSearchParams.get('dna'));
  }

  // Initialize the input handlers
  fileInputHandler('#dna-file-input', '#dna-input');
  fileInputHandler('#dna-file-input-1', '#dna-input-1');
  fileInputHandler('#dna-file-input-2', '#dna-input-2');

  // Initialize button handlers with AJAX calls
  // DNA to mRNA and proteins POST request
  $('#dna-to-proteins-button').click(event => {
    hideAlert(errorsOnly);
    $('#dna-translation-loader').removeClass('d-none');
    $.ajax({
      method: 'POST',
      url: '/api/dna',
      data: {
        dnaStr: $('#dna-input').val()
      },
      timeout: 10000
    })
    .done((data, statusText, xhr) => {
      const json = xhr.responseJSON;
      $('#mrna-input').val(json.mrnaStr);
      $('#protein-input').val(json.proteinStr);
    })
    .fail((xhr, statusText, errorString) => {
      ajaxError(xhr, statusText, errorString);
    })
    .always(() => {
      $('#dna-translation-loader').addClass('d-none');
    });
  });

  // Proteins to DNA and mRNA POST request
  $('#proteins-to-dna-button').click(event => {
    hideAlert(errorsOnly);
    $('#dna-translation-loader').removeClass('d-none');
    $.ajax({
      method: 'POST',
      url: '/api/proteins',
      data: {
        proteinStr: $('#protein-input').val()
      },
      timeout: 10000
    })
    .done((data, statusText, xhr) => {
      const json = xhr.responseJSON;
      $('#dna-input').val(json.dnaStr);
      $('#mrna-input').val(json.mrnaStr);
    })
    .fail((xhr, statusText, errorString) => {
      ajaxError(xhr, statusText, errorString);
    })
    .always(() => {
      $('#dna-translation-loader').addClass('d-none');
    });
  });

  // Edit distance POST request
  $('#edit-distance-button').click(event => {
    hideAlert(errorsOnly);
    $('#sequence-alignment-loader').removeClass('d-none');
    if (!requireInput('#dna-input-1', '#dna-input-2'))
    {
      $('#sequence-alignment-loader').addClass('d-none');
      return;
    }
    $.ajax({
      method: 'POST',
      url: '/api/edit-distance',
      data: {
        dnaStr1: $('#dna-input-1').val(),
        dnaStr2: $('#dna-input-2').val()
      },
      timeout: 10000
    })
    .done((data, statusText, xhr) => {
      const json = xhr.responseJSON;
      showAlert('info', 0, `The edit distance between DNA String 1 and DNA String 2 is ${json.editDistance}.`);
    })
    .fail((xhr, statusText, errorString) => {
      ajaxError(xhr, statusText, errorString);
    })
    .always(() => {
      $('#sequence-alignment-loader').addClass('d-none');
    });
  });

  // Needleman Wunsch POST request
  $('#needleman-wunsch-button').click(event => {
    hideAlert(errorsOnly);
    $('#sequence-alignment-loader').removeClass('d-none');
    if (!requireInput('#dna-input-1', '#dna-input-2'))
    {
      $('#sequence-alignment-loader').addClass('d-none');
      return;
    }
    $.ajax({
      method: 'POST',
      url: '/api/needleman-wunsch',
      data: {
        dnaStr1: $('#dna-input-1').val(),
        dnaStr2: $('#dna-input-2').val()
      },
      timeout: 10000
    })
    .done((data, statusText, xhr) => {
      const json = xhr.responseJSON;
      $('#needleman-wunsch-alignments').val(json.needlemanWunschAlignments);
    })
    .fail((xhr, statusText, errorString) => {
      ajaxError(xhr, statusText, errorString);
    })
    .always(() => {
      $('#sequence-alignment-loader').addClass('d-none');
    });
  });

  // Initialize the copy text handlers
  copyTextHandler('#copy-dna', '#dna-input');
  copyTextHandler('#copy-mrna', '#mrna-input');
  copyTextHandler('#copy-proteins', '#protein-input');
  copyTextHandler('#copy-dna-1', '#dna-input-1');
  copyTextHandler('#copy-dna-2', '#dna-input-2');
  copyTextHandler('#copy-alignments', '#needleman-wunsch-alignments');

  // Initialize the download text handlers
  downloadHandler('#download-dna', '#dna-input', 'DNA.fasta', 'application/fasta');
  downloadHandler('#download-mrna', '#mrna-input', 'mRNA.fasta', 'application/fasta');
  downloadHandler('#download-proteins', '#protein-input', 'Protein Sequence.txt', 'text/plain');
  downloadHandler('#download-dna-1', '#dna-input-1', 'DNA 1.fasta', 'application/fasta');
  downloadHandler('#download-dna-2', '#dna-input-2', 'DNA 2.fasta', 'application/fasta');
  downloadHandler('#download-alignments', '#needleman-wunsch-alignments', 'Needleman Wunsch Alignments.txt', 'text/plain');

  // Initialize the clear text handlers
  clearTextHandler('#clear-dna', '#dna-input');
  clearTextHandler('#clear-proteins', '#protein-input');
  clearTextHandler('#clear-dna-1', '#dna-input-1');
  clearTextHandler('#clear-dna-2', '#dna-input-2');

  // Initialize the url param redirect handlers
  openHandler('#open-dna', '#dna-input', '/sequence-alignment');
  openHandler('#open-dna-1', '#dna-input-1', '/');
  openHandler('#open-dna-2', '#dna-input-2', '/');
});
